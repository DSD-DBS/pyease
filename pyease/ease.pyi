import logging
import typing as t
from pathlib import Path
from typing import Any

BOT: t.Any
DEBUG: bool
IS_EASE_CTXT: bool
MODULE_DIR: Path
logger: logging.Logger

class _MyLoggingFilter(logging.Filter):
    def __init__(self) -> None: ...
    def filter(self, record): ...

formatter: logging.Formatter
console_hdl: logging.Handler

class ButtonWithLabelIsAvailable:
    label: Any
    def __init__(self, label) -> None: ...
    bot: Any
    def init(self, bot) -> None: ...
    def test(self) -> bool: ...
    def getFailureMessage(self): ...
    class Java:
        implements: Any

class ButtonWithLabelIsEnabled:
    label: Any
    def __init__(self, label) -> None: ...
    bot: Any
    def init(self, bot) -> None: ...
    def test(self) -> bool: ...
    def getFailureMessage(self): ...
    class Java:
        implements: Any

class ComboBoxWithLabelIsAvailable:
    label: Any
    def __init__(self, label) -> None: ...
    bot: Any
    def init(self, bot) -> None: ...
    def test(self) -> bool: ...
    def getFailureMessage(self): ...
    class Java:
        implements: Any

class CompareResultIsAvailable:
    label: Any
    def __init__(self, label) -> None: ...
    bot: Any
    def init(self, bot) -> None: ...
    def test(self) -> bool: ...
    def getFailureMessage(self): ...
    class Java:
        implements: Any

class MenuIsAvailable:
    label: Any
    def __init__(self, label) -> None: ...
    bot: Any
    def init(self, bot) -> None: ...
    def test(self) -> bool: ...
    def getFailureMessage(self): ...
    class Java:
        implements: Any

class TextfieldWithLabelIsAvailable:
    label: Any
    def __init__(self, label) -> None: ...
    bot: Any
    def init(self, bot) -> None: ...
    def test(self) -> bool: ...
    def getFailureMessage(self): ...
    class Java:
        implements: Any

class TreeItemWithLabelMatchingRegExIsAvailable:
    tree: Any
    label_regex: Any
    def __init__(self, tree: t.Any, label_regex: str) -> None: ...
    bot: Any
    def init(self, bot) -> None: ...
    def test(self) -> bool: ...
    def getFailureMessage(self): ...
    class Java:
        implements: Any

def click_button_with_label(label: str, timeout: int = ..., interval: int = ...): ...
def clone_project_from_git(git_repo_url: str, git_repo_branch: str, target_git_clone_dir: Path): ...
def create_empty_workspace_with_ease_setup() -> None: ...
def fill_text_field_with_label(label: str, text: str): ...
def is_eclipse_view_shown(title: str) -> bool: ...
def kill_capella_process(signal: int = ...): ...
def log_intro_messages() -> None: ...
def log_to_file(log_file_path: Path, mode: str = ...): ...
def open_eclipse_perspective(name: str): ...
def open_eclipse_view(category: str, title: str): ...
def project_explorer_tree() -> t.Any: ...
def workspace_path() -> Path: ...
